// Generated by LiveScript 1.3.1
var _, mason, signer, order;
_ = require('lodash');
mason = require('xmlbuilder');
signer = require('oauth-signature');
order = (function(){
  order.displayName = 'order';
  var prototype = order.prototype, constructor = order;
  importAll$(prototype, arguments[0]);
  function order(octx){
    var defaults;
    this.octx = octx;
    defaults = {
      debug: false,
      method: 'GET',
      oauth_version: '1.0',
      oauth_nonce: '#uuid',
      oauth_signature_method: 'HMAC-SHA1',
      oauth_timestamp: Math.floor(new Date())
    };
    _.assign(this.octx, defaults);
    this.toxml();
    this.sign();
    order.superclass.call(this);
  }
  prototype.evaluate = function(prop){
    var ref$;
    switch (props) {
    case 'direct_order_url':
      return (ref$ = this.get('debug')) != null
        ? ref$
        : {
          "http://demo.pesapal.com/api/postpesapaldirectorderv4": "https://www.pesapal.com/API/PostPesapalDirectOrderV4"
        };
    case 'payment_status_url':
      return (ref$ = this.get('debug')) != null
        ? ref$
        : {
          "http://demo.pesapal.com/api/querypaymentstatus": "https://www.pesapal.com/API/QueryPaymentStatus"
        };
    case 'payment_details_url':
      return (ref$ = this.get('debug')) != null
        ? ref$
        : {
          "http://demo.pesapal.com/api/querypaymentdetails": "https://www.pesapal.com/API/QueryPaymentDetails"
        };
    default:
      throw new Error('can not evaluate prop');
    }
  };
  prototype.sign = function(){
    var params, ticket, signature, ref$;
    params = _.clone(this.octx);
    this.signs = _.omit(params, 'oauth_consumer_secret');
    ticket = {
      method: this.get('method'),
      url: this.evaluate('direct_order_url'),
      parameters: params,
      consumer_secret: this.get('oauth_consumer_secret')
    };
    signature = signer.generate(ticket, {
      encodeSignature: false
    });
    return ref$ = this.octx, ref$.oauth_signature = signature, ref$;
  };
  prototype.toxml = function(){
    var $, prd, ref$;
    $ = _.pluck(this.octx, pesapal_request_data);
    prd = mason.create('PesapalDirectOrderInfo').dec('1.0', 'UTF-8', true).att('Type', $.type).att('Amount', $.amount).att('Reference', $.reference).att('Description', $.description).att('Email', (ref$ = $.email) != null
      ? ref$
      : {
        email: $['']
      }).att('PhoneNumber', (ref$ = $.phone) != null
      ? ref$
      : {
        phone: $['']
      }).att('xmlns:xsd', 'http://www.w3.org/2001/XMLSchema').att('xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance').end({
      pretty: false,
      indent: '  ',
      newline: '\n'
    });
    return ref$ = this.octx, ref$.pesapal_request_data = prd, ref$;
  };
  prototype.url = function(){
    return this.get('method' + '&' + this.evaluate('direct_payment_url' + '&' + qs.stringify(this.signs)));
  };
  prototype.get = function(prop){
    if (_.has(this.octx, prop)) {
      return _.values(_.pick(this.octx, prop)).toString();
    }
    throw new Error('you only get what you set');
  };
  prototype.tostring = function(){
    return JSON.stringify(this.octx);
  };
  return order;
}(mutation));
module.exports = order;
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}